socket管理类，封装了socket的各种原始操作，
一个TC_Socket对象就是一个socket，socket_fd存在_sock里

		TC_Socket_Exception : public TC_Exception
			TC_Socket_Exception(const string &buffer) : TC_Exception(buffer){}
			TC_Socket_Exception(const string &buffer, int err) : TC_Exception(buffer, err){}
			~TC_Socket_Exception() throw() {}
		TC_SocketConnect_Exception : public TC_Socket_Exception
			TC_SocketConnect_Exception(const string &buffer) : TC_Socket_Exception(buffer){}
			TC_SocketConnect_Exception(const string &buffer, int err) : TC_Socket_Exception(buffer, err){}
			~TC_SocketConnect_Exception() throw() {}
		TC_Socket
			public:
				TC_Socket();
				~TC_Socket();
				init(int fd, bool bOwner, int iDomain = AF_INET);
				setOwner(bool bOwner) { _bOwner = bOwner; }
				setDomain(int iDomain) { _iDomain = iDomain; }
				createSocket(int iSocketType = SOCK_STREAM, int iDomain = AF_INET);
				getfd() const { return _sock; }
				isValid() const { return _sock != INVALID_SOCKET; }
				close();
				getPeerName(string &sPeerAddress, uint16_t &iPeerPort);
				getPeerName(string &sPathName);
				getSockName(string &sSockAddress, uint16_t &iSockPort);
				getSockName(string &sPathName);
				setSockOpt(int opt, const void *pvOptVal, socklen_t optLen, int level = SOL_SOCKET);
				getSockOpt(int opt, void *pvOptVal, socklen_t &optLen, int level = SOL_SOCKET);
				//接收一个外部连接，把新生成的socket放在tcSock中，tcSock一定要是个全新的TC_Socket对象
				accept(TC_Socket &tcSock, struct sockaddr *pstSockAddr, socklen_t &iSockLen);
				bind(const string &sServerAddr, int port);
				bind(const char *sPathName);
				connect(const string &sServerAddr, uint16_t port);
				connect(const char *sPathName);
				connectNoThrow(const string &sServerAddr, uint16_t port);
				connectNoThrow(struct sockaddr* addr);
				connectNoThrow(const char *sPathName);
				listen(int connBackLog);
				recv(void *pvBuf, size_t iLen, int iFlag = 0);
				send(const void *pvBuf, size_t iLen, int iFlag = 0);
				recvfrom(void *pvBuf, size_t iLen, string &sFromAddr, uint16_t &iFromPort, int iFlags = 0);
				recvfrom(void *pvBuf, size_t iLen, struct sockaddr *pstFromAddr, socklen_t &iFromLen, int iFlags = 0);
				sendto(const void *pvBuf, size_t iLen, const string &sToAddr, uint16_t iToPort, int iFlags = 0);
				sendto(const void *pvBuf, size_t iLen, struct sockaddr *pstToAddr, socklen_t iToLen, int iFlags = 0);
				shutdown(int iHow);
				//设置socket的属性为阻塞或非阻塞，通过fcntl对socket fd来设置
				setblock(bool bBlock = false);
				setNoCloseWait();
				setCloseWait(int delay = 30);
				setCloseWaitDefault();
				setTcpNoDelay();
				setKeepAlive();
				getRecvBufferSize();
				setRecvBufferSize(int sz);
				getSendBufferSize();
				setSendBufferSize(int sz);
				getLocalHosts();
				setblock(int fd, bool bBlock);
				createPipe(int fds[2], bool bBlock);
					stAddr;
				parseAddr(const string &sAddr, struct in_addr &stAddr);
				bind(struct sockaddr *pstBindAddr, socklen_t iAddrLen);
				#if 0
					#endif
			protected:
				connect(struct sockaddr *pstServerAddr, socklen_t serverLen);
				getPeerName(struct sockaddr *pstPeerAddr, socklen_t &iPeerLen);
				getSockName(struct sockaddr *pstSockAddr, socklen_t &iSockLen);
			private:
			protected:
				INVALID_SOCKET = -1;
				_sock;//socket_fd
				_bOwner;
				_iDomain;//socket类型
	#endif
